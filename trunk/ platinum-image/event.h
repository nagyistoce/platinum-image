//////////////////////////////////////////////////////////////////////////
//
//  Pt_event $Revision:$
//
/// The pt_event object (with FLTK-implementing subclass) is the interface
/// that allows events to be handled with the future option of migrating from FLTK.
///
//  $LastChangedBy: $
//

// This file is part of the Platinum library.
// Copyright (c) 2007 Uppsala University.
//
//    The Platinum library is free software; you can redistribute it and/or modify
//    it under the terms of the GNU Lesser General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    The Platinum library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public License
//    along with the Platinum library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#include <string>

class pt_event //! this class should not contain anything FLTK
    {
    public:
        typedef enum  { no_type,
            draw,
            hover,
            adjust,
            create,   
            browse,   
            scroll,  //may be generated by mouse wheel, not necessarily for scrolling     
            key,    
            dragNdrop	
            }pt_event_type;
        typedef enum  { no_state,
            idle,                      // for pressing modifier keys
            begin,                     // mouse/key down
            iterate,                   // drag/key repeat
            end
            } pt_event_state;
    protected:
        int mousePos[2];
        int value;                    //key + modifier
        pt_event_type type;
        pt_event_state state;
        pt_event();
    public:
        virtual void grab () = 0;
    };

class FLTK_event : public pt_event
    {
    private:
        static std::string eventnames[];
        void set_type (); //helper to set state variable
    protected:
        FLTK_event (int FL_event); //! constructor translates the content of the FLTK event into a neutral format that is stored in the base class
        virtual void grab () {}
    };

class viewport_event : public FLTK_event
    {
    public:
        viewport_event (int FL_event);
        virtual void grab () {}
    };

