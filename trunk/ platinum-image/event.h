//////////////////////////////////////////////////////////////////////////
//
//  Pt_event $Revision$
//
/// The pt_event object (with FLTK-implementing subclass) is the interface
/// that allows events to be handled with the future option of migrating from FLTK.
///
//  $LastChangedBy$
//

// This file is part of the Platinum library.
// Copyright (c) 2007 Uppsala University.
//
//    The Platinum library is free software; you can redistribute it and/or modify
//    it under the terms of the GNU Lesser General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    The Platinum library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public License
//    along with the Platinum library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __pt_event__
#define __pt_event__

#include <string>
#include <vector>
#include <FL/Fl_Widget.H>

class FLTKviewport;

class pt_event //! this class should not contain anything FLTK
{
public:
    typedef enum  { no_type,
        hover,
        adjust,  //typically LMB
        create,  //typically RMB
        browse,  //typically MMB
        scroll,  //may be generated by mouse wheel, not necessarily for scrolling     
        key,    
        dragNdrop,
        draw,
        resize
    }pt_event_type;
    typedef enum  { no_state,
        idle,                      // for pressing modifier keys
        begin,                     // mouse/key down
        iterate,                   // drag/key repeat
        end
    } pt_event_state;
protected:
        bool handled_;
    int mousePos[2];
    int mouseStart[2];
    int resizeDim[2];
    int wheelDelta;
    int value;                    //key + modifier
    pt_event_type type_;
    pt_event_state state_;
    pt_event();
public:
    virtual void grab ();
    virtual void ungrab (); //use wisely (i.e. don't :)
                            // *** access functions ***
    bool handled();
    
    void set_resize (int w, int h);
    
    const int scroll_delta();
    const int * drag_start();
    const int * get_resize();
    const pt_event_type type();
    const pt_event_state state();
    const int * mouse_pos_global();
};

class FLTK_event : public pt_event
{
private:
    static std::string eventnames[];
    void set_type (); //helper to set type variable
    void attach (Fl_Widget *);
protected:
        Fl_Widget * myWidget;
    FLTK_event (int FL_event, FLTKviewport * fvp); //! constructor translates the content of the FLTK event into a neutral format that is stored in the base class
    FLTK_event (FLTKviewport * fvp);
    
public:
        std::vector<int> mouse_pos_local();
};

class viewport_event : public FLTK_event
{
public:
    viewport_event (pt_event_type, FLTKviewport * fvp); //constructor for events not from FLTK event no. (e.g. draw)
    viewport_event (int FL_event, FLTKviewport * fvp);
    viewport_event() : FLTK_event (NULL) {}
    
    FLTKviewport * get_FLTK_viewport();
    void resize_point (int &x,int &y);
};

#endif //__pt_event__

